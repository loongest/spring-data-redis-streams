"use strict";(self.webpackChunkredis=self.webpackChunkredis||[]).push([[4500],{4189:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorial-basics/xack","title":"XACK","description":"The XACK command removes one or more messages from a Redis Stream Pending Entries List (PEL), marking them as acknowledged for a given consumer group.","source":"@site/docs/tutorial-basics/09-xack.mdx","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/xack","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xack","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/09-xack.mdx","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"XGROUP ...","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xgroup-consumer"},"next":{"title":"XCLAIM/XAUTOCLAIM","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xclaim"}}');var t=r(4848),a=r(8453);const i={sidebar_position:9},c="XACK",o={},d=[{value:"Syntax",id:"syntax",level:2},{value:"Before Acknowledgement (Manual)",id:"before-acknowledgement-manual",level:2},{value:"\u2705 Spring Data Redis \u2013 Implement Acknowledgement",id:"-spring-data-redis--implement-acknowledgement",level:2},{value:"Testing It Step by Step",id:"testing-it-step-by-step",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"xack",children:"XACK"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"XACK"})," command removes one or more messages from a Redis Stream ",(0,t.jsx)(n.strong,{children:"Pending Entries List (PEL)"}),", marking them as acknowledged for a given consumer group."]}),"\n",(0,t.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"XACK key group id [id ...]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"before-acknowledgement-manual",children:"Before Acknowledgement (Manual)"}),"\n",(0,t.jsx)(n.p,{children:"Assume in our previous example you haven\u2019t implemented any acknowledgment logic yet:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'for (MapRecord<String, Object, Object> record : records) {\n    String streamId = record.getId().getValue();\n\n    if (!repository.existsByStreamId(streamId)) {\n        RaceStreamEntity entity = toEntity(record);\n        repository.save(entity);\n\n        //@TODO: Acknowledge after successful save\n    } else {\n        log.info("\u26a0\ufe0f Skipped duplicate streamId: {}", streamId);\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When the program is running, you can inspect the ",(0,t.jsx)(n.strong,{children:"Pending Entries List"})," using ",(0,t.jsx)(n.code,{children:"XPENDING"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'XPENDING race:france race-group\n1) (integer) 10                       # Total pending messages\n2) "1754490516011-0"                  # Oldest pending ID\n3) "1754490516011-9"                  # Newest pending ID\n4) 1) 1) "consumer-B"\n      2) "10"\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can manually acknowledge the first message:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"127.0.0.1:6379> XACK race:france race-group 1754490516011-0\n(integer) 1\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now the XPENDING shows 9 remaining:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'127.0.0.1:6379> XPENDING race:france race-group\n1) (integer) 19\n2) "1754490516011-1"\n3) "1754490516011-19"\n4) 1) 1) "consumer-B"\n      2) "19"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-spring-data-redis--implement-acknowledgement",children:"\u2705 Spring Data Redis \u2013 Implement Acknowledgement"}),"\n",(0,t.jsx)(n.p,{children:"Now let\u2019s implement what was missing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Scheduled(fixedDelay = 60000)\npublic void consumeStreamGroup() {\n    StreamOperations<String, Object, Object> streamOps = redisTemplate.opsForStream();\n\n    try {\n       /*\n        *   XREADGROUP GROUP race-group consumer-B COUNT 10 BLOCK 5000 STREAMS race:france >\n        */\n        List<MapRecord<String, Object, Object>> records = streamOps.read(\n                Consumer.from(GROUP_NAME, CONSUMER_NAME),\n                StreamReadOptions.empty().block(Duration.ofSeconds(5)).count(10),\n                StreamOffset.create(STREAM_KEY, ReadOffset.from("0"))\n            );\n\n        );\n\n        if (records == null || records.isEmpty()) {\n            log.debug("\u23f3 No new messages.");\n            return;\n        }\n\n        for (MapRecord<String, Object, Object> record : records) {\n            String streamId = record.getId().getValue();\n\n            if (!repository.existsByStreamId(streamId)) {\n                RaceStreamEntity entity = toEntity(record);\n                repository.save(entity);\n\n                // Acknowledge after successful save\n                streamOps.acknowledge(STREAM_KEY, GROUP_NAME, record.getId());\n                log.info("\u2705 Saved & ACK: {}", streamId);\n            } else {\n                log.info("\u26a0\ufe0f Skipped duplicate streamId: {}", streamId);\n            }\n        }\n    } catch (DataAccessException e) {\n        log.error("\u274c Redis access error: {}", e.getMessage(), e);\n    } catch (Exception e) {\n        log.error("\u274c Unknown error in stream consumption", e);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testing-it-step-by-step",children:"Testing It Step by Step"}),"\n",(0,t.jsxs)(n.p,{children:["When you restart the application and let it process again, you\u2019ll observe the number of pending messages ",(0,t.jsx)(n.strong,{children:"decrease progressively"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'127.0.0.1:6379> XPENDING race:france race-group\n1) (integer) 49\n2) "1754490516011-1"\n3) "1754490516011-49"\n4) 1) 1) "consumer-B"\n      2) "49"\n\n127.0.0.1:6379> XPENDING race:france race-group\n1) (integer) 39\n2) "1754490516011-11"\n3) "1754490516011-49"\n4) 1) 1) "consumer-B"\n      2) "39"\n\n127.0.0.1:6379> XPENDING race:france race-group\n1) (integer) 29\n2) "1754490516011-21"\n3) "1754490516011-49"\n4) 1) 1) "consumer-B"\n      2) "29"\n\n127.0.0.1:6379> XPENDING race:france race-group\n1) (integer) 19\n2) "1754490516011-31"\n3) "1754490516011-49"\n4) 1) 1) "consumer-B"\n      2) "19"    \n\n127.0.0.1:6379> XPENDING race:france race-group\n1) (integer) 9\n2) "1754490516011-41"\n3) "1754490516011-49"\n4) 1) 1) "consumer-B"\n      2) "9"      \n\n127.0.0.1:6379> XPENDING race:france race-group\n1) (integer) 0\n2) (nil)\n3) (nil)\n4) (nil)              \n'})}),"\n",(0,t.jsx)(n.p,{children:"This confirms that your consumer is successfully acknowledging each message after processing."}),"\n",(0,t.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"In this section, we extended our stream consumer to handle acknowledgement via XACK, completing the message lifecycle."}),"\n",(0,t.jsxs)(n.li,{children:["Instead of consuming only unseen entries (>) like before, we now also retrieve ",(0,t.jsx)(n.strong,{children:"pending unacknowledged messages"})," for retry:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'StreamOffset.create(STREAM_KEY, ReadOffset.from("0"))\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Then, after successfully persisting to the database, we acknowledge each processed message:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"streamOps.acknowledge(STREAM_KEY, GROUP_NAME, record.getId());\n"})}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(6540);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);