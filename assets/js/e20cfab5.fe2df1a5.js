"use strict";(self.webpackChunkredis=self.webpackChunkredis||[]).push([[4981],{4583:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorial-basics/xrange","title":"XRANGE","description":"The XRANGE command is used to navigate Redis Stream entries in chronological order \u2014 from the oldest to the newest.","source":"@site/docs/tutorial-basics/03-xrange.mdx","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/xrange","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xrange","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/03-xrange.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"XADD","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xadd"},"next":{"title":"XREVRANGE","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xrevrange"}}');var t=r(4848),s=r(8453);const a={sidebar_position:3},o="XRANGE",d={},c=[{value:"First page (COUNT 5):",id:"first-page-count-5",level:3},{value:"Second page (COUNT 5):",id:"second-page-count-5",level:3},{value:"Spring Data Redis",id:"spring-data-redis",level:2},{value:"Using XRANGE with StreamOperations",id:"using-xrange-with-streamoperations",level:2},{value:"Example: curl to fetch first page (first 5 entries)",id:"example-curl-to-fetch-first-page-first-5-entries",level:3},{value:"Example: fetch next page (use last ID + 1)",id:"example-fetch-next-page-use-last-id--1",level:2},{value:"Read single message",id:"read-single-message",level:2},{value:"Java code",id:"java-code",level:2},{value:"Test with Curl",id:"test-with-curl",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"xrange",children:"XRANGE"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"XRANGE"})," command is used to navigate Redis Stream entries in chronological order \u2014 from the ",(0,t.jsx)(n.strong,{children:"oldest"})," to the ",(0,t.jsx)(n.strong,{children:"newest"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In a previous example, we demonstrated how to use ",(0,t.jsx)(n.code,{children:"XRANGE"})," to list all stream entries from beginning to end. In this section, we\u2019ll go deeper by exploring ",(0,t.jsx)(n.strong,{children:"pagination"})," techniques using ",(0,t.jsx)(n.code,{children:"XRANGE"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"XRANGE [key]  [start]  [end]  COUNT  [count]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Special markers:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-"})," (dash) = lowest ID (beginning of stream)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"+"})," (plus) = highest ID (end of stream)"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"XRANGE race:france -  +\n"})}),"\n",(0,t.jsx)(n.h1,{id:"prepare-sample-data",children:"Prepare Sample Data"}),"\n",(0,t.jsxs)(n.p,{children:["To test pagination with ",(0,t.jsx)(n.code,{children:"XRANGE"}),", we'll generate sample data in Redis using a Lua script. Once complete, we\u2019ll move on to implementing it in Java."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Save this to a file: generate_race.lua"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'\n-- KEYS[1] = stream name\n-- ARGV[1] = number of records to generate\n\nlocal stream = KEYS[1]\nlocal count = tonumber(ARGV[1])\n\n-- List of rider names to choose from\nlocal riders = { "Castilla", "Lopez", "Moreira", "Fernandez", "Van Aert", "Pogacar", "Roglic", "Evenepoel", "Thomas", "Vingegaard" }\n\nmath.randomseed(redis.call(\'TIME\')[2])  -- Seed with high-res time (microseconds)\n\nfor i = 1, count do\n    local rider = riders[math.random(1, #riders)]\n    local speed = string.format("%.1f", 20 + math.random() * 20)\n    local location_id = tostring(math.random(1, 5))\n    local position = tostring(i)\n\n    redis.call(\'XADD\', stream, \'*\',\n        \'rider\', rider,\n        \'speed\', speed,\n        \'position\', position,\n        \'location_id\', location_id\n    )\nend\n\nreturn count\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Run it via redis-cli"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"redis-cli --eval generate_race.lua race:france , 50\n"})}),"\n",(0,t.jsx)(n.p,{children:"You should see:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"(integer) 50\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["This will add 50 entries to the stream race",":france",", with:"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Random rider names (from a preset list)"}),"\n",(0,t.jsx)(n.li,{children:"Random speed (20.0\u201340.0)"}),"\n",(0,t.jsx)(n.li,{children:"Random location_id (1\u20135)"}),"\n",(0,t.jsx)(n.li,{children:"Auto-incrementing position (1 to 50)"}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Check the results"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'redis-cli XRANGE race:france - +\n\n1) 1) "1754326272465-0"\n    2) 1) "rider"\n       2) "Lopez"\n       3) "speed"\n       4) "31.5"\n       5) "position"\n       6) "1"\n       7) "location_id"\n       8) "1"\n...\n49) 1) "1754326272465-48"\n    2) 1) "rider"\n       2) "Fernandez"\n       3) "speed"\n       4) "22.5"\n       5) "position"\n       6) "49"\n       7) "location_id"\n       8) "5"\n50) 1) "1754326272465-49"\n    2) 1) "rider"\n       2) "Roglic"\n       3) "speed"\n       4) "20.3"\n       5) "position"\n       6) "50"\n       7) "location_id"\n       8) "3"       \n'})}),"\n",(0,t.jsx)(n.h1,{id:"fetch-data-in-chunk-pagination",children:"Fetch Data in Chunk (Pagination)"}),"\n",(0,t.jsxs)(n.p,{children:["To paginate using ",(0,t.jsx)(n.code,{children:"XRANGE"}),", you can use the COUNT argument to limit results and use the last returned ID as a starting point for the next query."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example: Fetch 5 entries at a time"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"XRANGE race:france 0 + COUNT 5\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udca1"," ",(0,t.jsx)(n.strong,{children:"Note:"}),' 0 is equivalent to 0-1, meaning "start from the very beginning".']}),"\n",(0,t.jsx)(n.h3,{id:"first-page-count-5",children:"First page (COUNT 5):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'1) 1) "1754326272465-0"\n   2) 1) "rider"\n      2) "Lopez"\n      3) "speed"\n      4) "31.5"\n      5) "position"\n      6) "1"\n      7) "location_id"\n      8) "1"\n2) 1) "1754326272465-1"\n   2) 1) "rider"\n      2) "Castilla"\n      3) "speed"\n      4) "23.0"\n      5) "position"\n      6) "2"\n      7) "location_id"\n      8) "3"\n3) 1) "1754326272465-2"\n   2) 1) "rider"\n      2) "Van Aert"\n      3) "speed"\n      4) "38.6"\n      5) "position"\n      6) "3"\n      7) "location_id"\n      8) "3"\n4) 1) "1754326272465-3"\n   2) 1) "rider"\n      2) "Van Aert"\n      3) "speed"\n      4) "23.3"\n      5) "position"\n      6) "4"\n      7) "location_id"\n      8) "3"\n5) 1) "1754326272465-4"  <---- first paging result end here\n   2) 1) "rider"\n      2) "Moreira"\n      3) "speed"\n      4) "37.4"\n      5) "position"\n      6) "5"\n      7) "location_id"\n      8) "3"\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To get the next page, use the last ID ",(0,t.jsx)(n.strong,{children:"(1754326272465-4)"})," and increment the sequence part by 1 \u2192 ",(0,t.jsx)(n.strong,{children:'"1754326272465-5"'}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"> XRANGE numbers 1754326272465-5 + COUNT 5\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Even if ",(0,t.jsx)(n.strong,{children:'"1754326272465-5"'})," doesn\u2019t exactly exist, Redis will return the next available ID after it."]}),"\n",(0,t.jsx)(n.h3,{id:"second-page-count-5",children:"Second page (COUNT 5):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'1) 1) "1754326272465-5"\n   2) 1) "rider"\n      2) "Thomas"\n      3) "speed"\n      4) "20.9"\n      5) "position"\n      6) "6"\n      7) "location_id"\n      8) "2"\n2) 1) "1754326272465-6"\n   2) 1) "rider"\n      2) "Lopez"\n      3) "speed"\n      4) "26.3"\n      5) "position"\n      6) "7"\n      7) "location_id"\n      8) "5"\n3) 1) "1754326272465-7"\n   2) 1) "rider"\n      2) "Moreira"\n      3) "speed"\n      4) "29.8"\n      5) "position"\n      6) "8"\n      7) "location_id"\n      8) "4"\n4) 1) "1754326272465-8"\n   2) 1) "rider"\n      2) "Roglic"\n      3) "speed"\n      4) "36.3"\n      5) "position"\n      6) "9"\n      7) "location_id"\n      8) "3"\n5) 1) "1754326272465-9"\n   2) 1) "rider"\n      2) "Roglic"\n      3) "speed"\n      4) "33.2"\n      5) "position"\n      6) "10"\n      7) "location_id"\n      8) "2"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Repeat this process to paginate through the entire stream."}),"\n",(0,t.jsx)(n.h2,{id:"spring-data-redis",children:"Spring Data Redis"}),"\n",(0,t.jsx)(n.p,{children:"Create spring boot project with following commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"spring init -d=web,data-redis,devtools,thymeleaf,lombok \\\n  -g com.example \\\n  -a demo \\\n  -p jar \\\n  --build maven \\\n  xrange -x\n"})}),"\n",(0,t.jsx)(n.p,{children:"add the following to application.yaml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"spring:\n  data:\n    redis:\n      host: localhost\n      port: 6379\n"})}),"\n",(0,t.jsx)(n.p,{children:"from the DemoApplication.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import lombok.RequiredArgsConstructor;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.domain.Range;\nimport org.springframework.data.redis.connection.stream.MapRecord;\nimport org.springframework.data.redis.core.StreamOperations;\nimport org.springframework.data.redis.connection.Limit;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoApplication.class, args);\n\t}\n\n}\n\n@RestController\n@RequestMapping("/api/race")\n@RequiredArgsConstructor\nclass PagingRaceStreamController {\n\n\tprivate final StringRedisTemplate redisTemplate;\n\n\t@GetMapping("/paginate")\n\tpublic List<MapRecord<String, Object, Object>> paginateStream(\n\t\t\t@RequestParam(defaultValue = "race:france") String streamKey,\n\t\t\t@RequestParam(defaultValue = "0") String startId,\n\t\t\t@RequestParam(defaultValue = "+") String endId,\n\t\t\t@RequestParam(defaultValue = "5") int count\n\t) {\n\t\tStreamOperations<String, Object, Object> streamOperations = redisTemplate.opsForStream();\n\t\tRange<String> range = Range.closed(startId, endId);\n\t\treturn streamOperations.range(streamKey, range, Limit.limit().count(count));\n\t}\n\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-xrange-with-streamoperations",children:"Using XRANGE with StreamOperations"}),"\n",(0,t.jsx)(n.p,{children:"You typically interact with Redis Streams through the StreamOperations interface, which can be accessed via RedisTemplate.opsForStream()."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The XRANGE command requires a start and end stream ID. In Spring Data Redis, you represent this range using the ",(0,t.jsx)(n.strong,{children:"org.springframework.data.redis.connection.stream.Range"})," class."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You can create a closed range (inclusive of both start and end IDs) using ",(0,t.jsx)(n.strong,{children:"Range.closed(startId, endId)"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For unbounded ranges (e.g., from the beginning of the stream to a specific ID, or from a specific ID to the end), you can use ",(0,t.jsx)(n.strong,{children:"Range.unbounded()"})," or specify ",(0,t.jsx)(n.strong,{children:"StreamOffset.fromStart()"})," or ",(0,t.jsx)(n.strong,{children:"StreamOffset.fromEnd()"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Optionally to use ",(0,t.jsx)(n.strong,{children:"Range.open(startId, endId)"}),' means the starting ID is excluded, so it\'s perfect for paging from "last seen + 1". ',(0,t.jsx)("mark",{children:"You do not need to increment the ID."})," Because Range.open(startId, ...) will skip the startId, and start from the next available one (if exists)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Spring Boot with Lettuce automatically manages connections \u2014 no need to close or release manually."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"You can build a pagination service layer to encapsulate this logic if needed."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-curl-to-fetch-first-page-first-5-entries",children:"Example: curl to fetch first page (first 5 entries)"}),"\n",(0,t.jsxs)(n.p,{children:["Assume your app is running locally at ",(0,t.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),", and your endpoint is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'$ curl "http://localhost:8080/api/race/paginate?streamKey=race:france&startId=0&count=5" | jq\n\n[\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Lopez",\n      "speed": "31.5",\n      "position": "1",\n      "location_id": "1"\n    },\n    "id": {\n      "value": "1754326272465-0",\n      "timestamp": 1754326272465,\n      "sequence": 0\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Castilla",\n      "speed": "23.0",\n      "position": "2",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-1",\n      "timestamp": 1754326272465,\n      "sequence": 1\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Van Aert",\n      "speed": "38.6",\n      "position": "3",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-2",\n      "timestamp": 1754326272465,\n      "sequence": 2\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Van Aert",\n      "speed": "23.3",\n      "position": "4",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-3",\n      "timestamp": 1754326272465,\n      "sequence": 3\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Moreira",\n      "speed": "37.4",\n      "position": "5",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-4",\n      "timestamp": 1754326272465,\n      "sequence": 4\n    },\n    "requiredStream": "race:france"\n  }\n]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"example-fetch-next-page-use-last-id--1",children:"Example: fetch next page (use last ID + 1)"}),"\n",(0,t.jsx)(n.p,{children:"If your previous page ended with"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"id": "1754326272465-4"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Then the next request should be ",(0,t.jsx)(n.strong,{children:"(if using Range.close)"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl "http://localhost:8080/api/race/paginate?streamKey=race:france&startId=1754326272465-5&count=5" | jq\n'})}),"\n",(0,t.jsxs)(n.p,{children:["or next request should be direct ",(0,t.jsx)(n.strong,{children:"(if using Range.open)"}),": last entry id without increment"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl "http://localhost:8080/api/race/paginate?streamKey=race:france&startId=1754326272465-4&count=5" | jq\n'})}),"\n",(0,t.jsx)(n.p,{children:"in result"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Thomas",\n      "speed": "20.9",\n      "position": "6",\n      "location_id": "2"\n    },\n    "id": {\n      "value": "1754326272465-5",\n      "timestamp": 1754326272465,\n      "sequence": 5\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Lopez",\n      "speed": "26.3",\n      "position": "7",\n      "location_id": "5"\n    },\n    "id": {\n      "value": "1754326272465-6",\n      "timestamp": 1754326272465,\n      "sequence": 6\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Moreira",\n      "speed": "29.8",\n      "position": "8",\n      "location_id": "4"\n    },\n    "id": {\n      "value": "1754326272465-7",\n      "timestamp": 1754326272465,\n      "sequence": 7\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Roglic",\n      "speed": "36.3",\n      "position": "9",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-8",\n      "timestamp": 1754326272465,\n      "sequence": 8\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Roglic",\n      "speed": "33.2",\n      "position": "10",\n      "location_id": "2"\n    },\n    "id": {\n      "value": "1754326272465-9",\n      "timestamp": 1754326272465,\n      "sequence": 9\n    },\n    "requiredStream": "race:france"\n  }\n]\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Redis CLI itself doesn't have a direct equivalent of Range.open(...) from Spring Data Redis, because Redis commands like XRANGE and XREVRANGE always include both start and end IDs \u2014 i.e., they behave like Range.closed(...)."})}),"\n",(0,t.jsx)(n.h2,{id:"read-single-message",children:"Read single message"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"XRange"})," is very friendly to read on particular message, like example given the following command you'll get what you expect."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'127.0.0.1:6379> XRANGE race:france 1754326272465-15 1754326272465-15\n1) 1) "1754326272465-15"\n   2) 1) "rider"\n      2) "Vingegaard"\n      3) "speed"\n      4) "22.4"\n      5) "position"\n      6) "16"\n      7) "location_id"\n      8) "2"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["However if you use ",(0,t.jsx)(n.code,{children:"XREAD"})," you'll obtain the next Id based on given Id"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'127.0.0.1:6379> XREAD COUNT 1 STREAMS race:france 1754326272465-15\n1) 1) "race:france"\n   2) 1) 1) "1754326272465-16"\n         2) 1) "rider"\n            2) "Lopez"\n            3) "speed"\n            4) "26.6"\n            5) "position"\n            6) "17"\n            7) "location_id"\n            8) "1"\n'})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Use Case"}),(0,t.jsxs)(n.th,{children:["Use ",(0,t.jsx)(n.code,{children:"XREAD"}),"?"]}),(0,t.jsxs)(n.th,{children:["Use ",(0,t.jsx)(n.code,{children:"XRANGE"}),"?"]}),(0,t.jsx)(n.th,{children:"Why?"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Live data / consumer"})," (tailing, real-time)"]}),(0,t.jsx)(n.td,{children:"\u2705 Yes"}),(0,t.jsx)(n.td,{children:"\u274c No"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"XREAD"})," is optimized for reading new entries (like ",(0,t.jsx)(n.code,{children:"tail -f"}),")"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Backfill / historical scan"})}),(0,t.jsx)(n.td,{children:"\u274c No"}),(0,t.jsx)(n.td,{children:"\u2705 Yes"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"XRANGE"})," gives full control over range, ID inclusiveness"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Exact ID read"})}),(0,t.jsx)(n.td,{children:"\u274c No"}),(0,t.jsx)(n.td,{children:"\u2705 Yes"}),(0,t.jsxs)(n.td,{children:["Only ",(0,t.jsx)(n.code,{children:"XRANGE"})," allows precise ID match"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Blocking until new data"})}),(0,t.jsxs)(n.td,{children:["\u2705 Yes (",(0,t.jsx)(n.code,{children:"BLOCK"}),")"]}),(0,t.jsx)(n.td,{children:"\u274c No"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"XREAD"})," supports ",(0,t.jsx)(n.code,{children:"BLOCK"})," to wait for new entries"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Iterative pagination / batch scan"})}),(0,t.jsx)(n.td,{children:"\u274c Not ideal"}),(0,t.jsx)(n.td,{children:"\u2705 Yes"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"XRANGE"})," + ID offset is perfect for paginated scans"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Consumer groups / scalable processing"})}),(0,t.jsxs)(n.td,{children:["\u274c Use ",(0,t.jsx)(n.code,{children:"XREADGROUP"})," instead"]}),(0,t.jsx)(n.td,{children:"\u274c No"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"XREADGROUP"})," required for reliable queue-style consumption"]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"java-code",children:"Java code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/race")\n@RequiredArgsConstructor\nclass XRangeRaceStreamController {\n\n\tprivate final StringRedisTemplate redisTemplate;\n\t\n\t@GetMapping("/get")\n\tpublic MapRecord<String, Object, Object> readStream (\n\t\t\t@RequestParam(defaultValue = "race:france") String streamKey,\n\t\t\t@RequestParam(defaultValue = "0") String entryId\n\t) {\n\t\tStreamOperations<String, Object, Object> streamOperations = redisTemplate.opsForStream();\n\t\tRange<String> range = Range.closed(entryId, entryId);\n\t\tvar results = streamOperations.range(streamKey, range, Limit.limit().count(1));\n\t\treturn results.isEmpty() ? null : results.get(0);\n\t}\n}\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"test-with-curl",children:"Test with Curl"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl "http://localhost:8080/api/race/get?streamKey=race:france&entryId=1754326272465-15" | jq\n{\n  "stream": "race:france",\n  "value": {\n    "rider": "Vingegaard",\n    "speed": "22.4",\n    "position": "16",\n    "location_id": "2"\n  },\n  "id": {\n    "value": "1754326272465-15",\n    "timestamp": 1754326272465,\n    "sequence": 15\n  },\n  "requiredStream": "race:france"\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(6540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);