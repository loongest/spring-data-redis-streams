"use strict";(self.webpackChunkredis=self.webpackChunkredis||[]).push([[5437],{6754:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tutorial-basics/xinfo-stream","title":"XINFO STREAM","description":"The XINFO STREAM command in Redis is like the \\"stream metadata inspector\\" \u2014 it gives you detailed internal information about a stream key, similar to how you\'d use .describe() in databases or introspection in code.","source":"@site/docs/tutorial-basics/06-xinfo-stream.mdx","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/xinfo-stream","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xinfo-stream","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/06-xinfo-stream.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"XLEN","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xlen"},"next":{"title":"XREAD","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xread"}}');var i=t(4848),a=t(8453);const s={sidebar_position:6},d="XINFO STREAM",o={},l=[{value:"What does XINFO STREAM return?",id:"what-does-xinfo-stream-return",level:2},{value:"Example",id:"example",level:2},{value:"Spring Boot Example (Using Spring Data Redis)",id:"spring-boot-example-using-spring-data-redis",level:2},{value:"Example: curl to query",id:"example-curl-to-query",level:2},{value:"Return Your Custom DTO Instead",id:"return-your-custom-dto-instead",level:2},{value:"Example: curl to query",id:"example-curl-to-query-1",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"xinfo-stream",children:"XINFO STREAM"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"XINFO STREAM"}),' command in Redis is like the "stream metadata inspector" \u2014 it gives you detailed internal information about a stream key, similar to how you\'d use .describe() in databases or introspection in code.']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"XINFO STREAM [key]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"what-does-xinfo-stream-return",children:"What does XINFO STREAM return?"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"length"})}),(0,i.jsxs)(n.td,{children:["Total number of entries in the stream (same as ",(0,i.jsx)(n.code,{children:"XLEN"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"radix-tree-keys"})}),(0,i.jsx)(n.td,{children:"Number of radix-tree nodes (internal Redis structure)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"radix-tree-nodes"})}),(0,i.jsx)(n.td,{children:"Number of radix-tree leaves"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"groups"})}),(0,i.jsx)(n.td,{children:"Number of consumer groups attached to the stream"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"last-generated-id"})}),(0,i.jsx)(n.td,{children:"The last automatically generated stream ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"first-entry"})}),(0,i.jsx)(n.td,{children:"The very first entry in the stream"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"last-entry"})}),(0,i.jsx)(n.td,{children:"The latest entry in the stream"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'127.0.0.1:6379> xinfo stream race:france\n 1) "length"\n 2) (integer) 50\n 3) "radix-tree-keys"\n 4) (integer) 1\n 5) "radix-tree-nodes"\n 6) (integer) 2\n 7) "last-generated-id"\n 8) "1754326272465-49"\n 9) "max-deleted-entry-id"\n10) "0-0"\n11) "entries-added"\n12) (integer) 50\n13) "recorded-first-entry-id"\n14) "1754326272465-0"\n15) "groups"\n16) (integer) 0\n17) "first-entry"\n18) 1) "1754326272465-0"\n    2) 1) "rider"\n       2) "Lopez"\n       3) "speed"\n       4) "31.5"\n       5) "position"\n       6) "1"\n       7) "location_id"\n       8) "1"\n19) "last-entry"\n20) 1) "1754326272465-49"\n    2) 1) "rider"\n       2) "Roglic"\n       3) "speed"\n       4) "20.3"\n       5) "position"\n       6) "50"\n       7) "location_id"\n       8) "3"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"spring-boot-example-using-spring-data-redis",children:"Spring Boot Example (Using Spring Data Redis)"}),"\n",(0,i.jsx)(n.p,{children:"You can create a new Spring Boot project or reuse your existing project. Here's how to integrate XLEN into your app by adding a controller class."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"spring init -d=web,data-redis,devtools,thymeleaf,lombok \\\n  -g com.example \\\n  -a demo \\\n  -p jar \\\n  --build maven \\\n  xinfostream -x\n"})}),"\n",(0,i.jsx)(n.p,{children:"add the following to application.yaml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"spring:\n  data:\n    redis:\n      host: localhost\n      port: 6379\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you're reusing an existing project (like xrange or race",":france","), simply add this private static controller class inside your DemoApplication:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/stream")\n@RequiredArgsConstructor\nclass StreamInfoController {\n\n  private final StringRedisTemplate redisTemplate;\n\n  @GetMapping("/info")\n  public StreamInfo.XInfoStream getStreamInfo(@RequestParam(defaultValue = "race:france") String streamKey) {\n    return redisTemplate.execute((RedisCallback<StreamInfo.XInfoStream>) connection ->\n      connection.streamCommands().xInfo(streamKey.getBytes())\n    );\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example-curl-to-query",children:"Example: curl to query"}),"\n",(0,i.jsx)(n.p,{children:"You may notice that the following result return correctly. However the details is encoded."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'curl "http://localhost:8080/api/stream/info?streamKey=race:france" | jq   \n\n{\n  "raw": {\n    "length": 50,\n    "radix-tree-keys": 1,\n    "radix-tree-nodes": 2,\n    "last-generated-id": "1754326272465-49",\n    "max-deleted-entry-id": "0-0",\n    "entries-added": 50,\n    "recorded-first-entry-id": "1754326272465-0",\n    "groups": 0,\n    "first-entry": {\n      "1754326272465-0": {\n        "[B@463e999b": "TG9wZXo=",\n        "[B@6be77c45": "MzEuNQ==",\n        "[B@cd92da8": "MQ==",\n        "[B@2fdfd2dc": "MQ=="\n      }\n    },\n    "last-entry": {\n      "1754326272465-49": {\n        "[B@1d9f74fd": "Um9nbGlj",\n        "[B@4dca265f": "MjAuMw==",\n        "[B@83bf623": "NTA=",\n        "[B@59238cca": "Mw=="\n      }\n    }\n  },\n  "firstEntry": {\n    "1754326272465-0": {\n      "[B@463e999b": "TG9wZXo=",\n      "[B@6be77c45": "MzEuNQ==",\n      "[B@cd92da8": "MQ==",\n      "[B@2fdfd2dc": "MQ=="\n    }\n  },\n  "lastEntry": {\n    "1754326272465-49": {\n      "[B@1d9f74fd": "Um9nbGlj",\n      "[B@4dca265f": "MjAuMw==",\n      "[B@83bf623": "NTA=",\n      "[B@59238cca": "Mw=="\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"return-your-custom-dto-instead",children:"Return Your Custom DTO Instead"}),"\n",(0,i.jsx)(n.p,{children:"To resolve this, change your controller method to return StreamInfoDto (the decoded version). We'll create the custom class to corresponse the field and decoded it during the retrieve information."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'\n@SpringBootApplication\npublic class DemoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoApplication.class, args);\n\t}\n\n}\n\n@Data\n@Builder\nclass StreamEntryDto {\n\tprivate String id;\n\tprivate Map<String, String> fields;\n}\n\n@Data\n@Builder\nclass StreamInfoDto {\n\tprivate long length;\n\tprivate long radixTreeKeys;\n\tprivate long radixTreeNodes;\n\tprivate long groupCount;\n\tprivate String lastGeneratedId;\n\tprivate StreamEntryDto firstEntry;\n\tprivate StreamEntryDto lastEntry;\n}\n\n@RestController\n@RequestMapping("/api/stream")\n@RequiredArgsConstructor\nclass StreamInfoController {\n\n  private final StringRedisTemplate redisTemplate;\n\n  @GetMapping("/info")\n  public StreamInfoDto getStreamInfo(@RequestParam(defaultValue = "race:france") String streamKey) {\n    StreamInfo.XInfoStream info = redisTemplate.execute((RedisCallback<StreamInfo.XInfoStream>) connection ->\n        connection.streamCommands().xInfo(streamKey.getBytes(StandardCharsets.UTF_8))\n    );\n\n    if (info == null) return null;\n\n    StreamEntryDto firstEntry = convertStreamEntry(info.getFirstEntry());\n    StreamEntryDto lastEntry = convertStreamEntry(info.getLastEntry());\n\n    return StreamInfoDto.builder()\n        .length(info.streamLength())\n        .radixTreeKeys(info.radixTreeKeySize())\n        .radixTreeNodes(info.radixTreeNodesSize())\n        .groupCount(info.groupCount())\n        .lastGeneratedId(info.lastGeneratedId())\n        .firstEntry(firstEntry)\n        .lastEntry(lastEntry)\n        .build();\n  }\n\n  private StreamEntryDto convertStreamEntry(Map<Object, Object> rawEntry) {\n    if (rawEntry == null || rawEntry.isEmpty()) {\n      return null;\n    }\n\n    Map.Entry<Object, Object> outer = rawEntry.entrySet().iterator().next();\n\n    String id = outer.getKey().toString();\n    Object inner = outer.getValue();\n\n    if (!(inner instanceof Map<?, ?> innerMap)) {\n      return null;\n    }\n\n    Map<String, String> fields = new LinkedHashMap<>();\n    for (Map.Entry<?, ?> e : innerMap.entrySet()) {\n      String fieldKey = decodeObject(e.getKey());\n      String fieldValue = decodeObject(e.getValue());\n      fields.put(fieldKey, fieldValue);\n    }\n\n    return StreamEntryDto.builder()\n        .id(id)\n        .fields(fields)\n        .build();\n  }\n\n  private String decodeObject(Object obj) {\n    if (obj instanceof byte[] bytes) {\n      return new String(bytes, StandardCharsets.UTF_8);\n    }\n    return obj != null ? obj.toString() : "";\n  }\n\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example-curl-to-query-1",children:"Example: curl to query"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'curl "http://localhost:8080/api/stream/info?streamKey=race:france" | jq  \n\n{\n  "length": 50,\n  "radixTreeKeys": 1,\n  "radixTreeNodes": 2,\n  "groupCount": 0,\n  "lastGeneratedId": "1754326272465-49",\n  "firstEntry": {\n    "id": "1754326272465-0",\n    "fields": {\n      "[B@33a47a52": "Lopez",\n      "[B@4c2ff638": "31.5",\n      "[B@79d1a02a": "1",\n      "[B@4aecb999": "1"\n    }\n  },\n  "lastEntry": {\n    "id": "1754326272465-49",\n    "fields": {\n      "[B@5a8a3c7c": "Roglic",\n      "[B@69278f23": "20.3",\n      "[B@1d03b2dd": "50",\n      "[B@328ce095": "3"\n    }\n  }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);