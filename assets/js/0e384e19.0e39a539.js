"use strict";(self.webpackChunkredis=self.webpackChunkredis||[]).push([[3976],{2053:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"intro","title":"Tutorial Intro","description":"In modern microservices architecture, event-driven communication is becoming a powerful paradigm. Instead of services calling each other directly (tight coupling), they react to events, enabling better scalability, fault-tolerance, and flexibility.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/spring-data-redis-streams/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Tutorial - Basics","permalink":"/spring-data-redis-streams/docs/category/tutorial---basics"}}');var r=n(4848),t=n(8453);const l={sidebar_position:1},o="Tutorial Intro",a={},c=[{value:"\u2728 Why Redis Streams?",id:"-why-redis-streams",level:2},{value:"\ud83d\udd25 Features:",id:"-features",level:3},{value:"\ud83e\udde0 What You\u2019ll Learn",id:"-what-youll-learn",level:2},{value:"\ud83d\udcda Prerequisites",id:"-prerequisites",level:2},{value:"\ud83c\udfaf Target Audience",id:"-target-audience",level:2},{value:"\ud83d\udca1 Philosophy",id:"-philosophy",level:2}];function d(e){const i={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"tutorial-intro",children:"Tutorial Intro"})}),"\n",(0,r.jsxs)(i.p,{children:["In modern microservices architecture, ",(0,r.jsx)(i.strong,{children:"event-driven communication"})," is becoming a powerful paradigm. Instead of services calling each other directly (tight coupling), they ",(0,r.jsx)(i.strong,{children:"react to events"}),", enabling better ",(0,r.jsx)(i.strong,{children:"scalability, fault-tolerance, and flexibility"}),"."]}),"\n",(0,r.jsx)(i.p,{children:"There are many tools available to implement event-driven systems \u2014 each with its own strengths:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Kafka"}),": High-throughput, persistent log, ideal for large-scale data pipelines."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"RabbitMQ"}),": Reliable message broker with routing capabilities."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Redis Streams"}),": Lightweight, fast, and easy-to-use option for event streaming."]}),"\n",(0,r.jsxs)(i.li,{children:["And others like ",(0,r.jsx)(i.strong,{children:"NATS"}),", ",(0,r.jsx)(i.strong,{children:"AWS SNS/SQS"}),", ",(0,r.jsx)(i.strong,{children:"Azure Event Hubs"}),", etc."]}),"\n"]}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:["\ud83d\ude80 In this tutorial, I'll focus on ",(0,r.jsx)(i.strong,{children:"Redis Streams"}),", using what I've learned from ",(0,r.jsx)(i.strong,{children:"Redis University"})," and ",(0,r.jsx)(i.strong,{children:"Spring Data Redis"}),", to help you build event-driven microservices quickly and efficiently."]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-why-redis-streams",children:"\u2728 Why Redis Streams?"}),"\n",(0,r.jsxs)(i.p,{children:["Redis is already widely adopted for caching and in-memory storage, but Redis Streams (available since Redis 5.0) brings ",(0,r.jsx)(i.strong,{children:"powerful append-only log capabilities"})," to the table \u2014 making it suitable for event sourcing and real-time processing in microservices."]}),"\n",(0,r.jsx)(i.h3,{id:"-features",children:"\ud83d\udd25 Features:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Append-only event log"}),"\n",(0,r.jsx)(i.li,{children:"Persistent storage"}),"\n",(0,r.jsx)(i.li,{children:"Blocking reads (real-time)"}),"\n",(0,r.jsx)(i.li,{children:"Consumer groups (parallel processing, tracking)"}),"\n",(0,r.jsx)(i.li,{children:"Lightweight, easy to operate"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-what-youll-learn",children:"\ud83e\udde0 What You\u2019ll Learn"}),"\n",(0,r.jsxs)(i.p,{children:["This hands-on tutorial aims to ",(0,r.jsx)(i.strong,{children:"accelerate your event-driven journey"})," using Redis Streams + Spring Boot:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Core concepts of Redis Streams (",(0,r.jsx)(i.code,{children:"XADD"}),", ",(0,r.jsx)(i.code,{children:"XREAD"}),", ",(0,r.jsx)(i.code,{children:"XREADGROUP"}),", ",(0,r.jsx)(i.code,{children:"XACK"}),")"]}),"\n",(0,r.jsx)(i.li,{children:"Stream setup and CLI testing"}),"\n",(0,r.jsx)(i.li,{children:"Producer/consumer pattern in Spring Data Redis"}),"\n",(0,r.jsx)(i.li,{children:"How to backfill and stream live data"}),"\n",(0,r.jsx)(i.li,{children:"Consumer Groups for horizontal scalability"}),"\n",(0,r.jsx)(i.li,{children:"Real-world use cases and best practices"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-prerequisites",children:"\ud83d\udcda Prerequisites"}),"\n",(0,r.jsx)(i.p,{children:"Before diving in, it helps to be familiar with:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Basic Redis CLI commands"}),"\n",(0,r.jsx)(i.li,{children:"Spring Boot fundamentals"}),"\n",(0,r.jsx)(i.li,{children:"Java and Maven/Gradle build tools"}),"\n",(0,r.jsx)(i.li,{children:"Microservice architecture basics (REST, services, etc.)"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-target-audience",children:"\ud83c\udfaf Target Audience"}),"\n",(0,r.jsx)(i.p,{children:"This guide is perfect for:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Developers who are new to Redis Streams"}),"\n",(0,r.jsx)(i.li,{children:"Spring Boot engineers building microservices"}),"\n",(0,r.jsxs)(i.li,{children:["Anyone looking for a ",(0,r.jsx)(i.strong,{children:"lightweight"})," alternative to Kafka or RabbitMQ"]}),"\n",(0,r.jsx)(i.li,{children:"Teams who already use Redis and want to unlock more value from it"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-philosophy",children:"\ud83d\udca1 Philosophy"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:["Don't let complex tooling slow you down. Start with something lightweight like Redis Streams to grasp the ",(0,r.jsx)(i.strong,{children:"core principles of event-driven systems"})," \u2014 then scale up to Kafka or other tools when needed."]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Let\u2019s dive in and start with the basics of Redis Streams in the next section!"})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>o});var s=n(6540);const r={},t=s.createContext(r);function l(e){const i=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);