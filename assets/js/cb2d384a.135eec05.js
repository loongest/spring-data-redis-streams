"use strict";(self.webpackChunkredis=self.webpackChunkredis||[]).push([[1138],{1232:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorial-basics/xadd","title":"XADD","description":"The XADD command is the primary method for publishing new messages into a Redis stream. In Redis Streams, producers use XADD to append data entries\u2014commonly referred to as events\u2014to a stream. Each entry consists of a key-value pair and is assigned a unique stream ID.","source":"@site/docs/tutorial-basics/02-xadd.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/xadd","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xadd","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/02-xadd.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Redis Stream Commands","permalink":"/spring-data-redis-streams/docs/tutorial-basics/create-a-page"},"next":{"title":"XRANGE","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xrange"}}');var r=i(4848),s=i(8453);const a={sidebar_position:2},o="XADD",d={},c=[{value:"Redis-CLI",id:"redis-cli",level:2},{value:"Spring Boot: XADD with Spring Data Redis",id:"spring-boot-xadd-with-spring-data-redis",level:2},{value:"Configure Redis",id:"configure-redis",level:2},{value:"Define the Application and Controller",id:"define-the-application-and-controller",level:2},{value:"Test the Endpoint",id:"test-the-endpoint",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"xadd",children:"XADD"})}),"\n",(0,r.jsx)(n.p,{children:"The XADD command is the primary method for publishing new messages into a Redis stream. In Redis Streams, producers use XADD to append data entries\u2014commonly referred to as events\u2014to a stream. Each entry consists of a key-value pair and is assigned a unique stream ID."}),"\n",(0,r.jsx)(n.p,{children:"In this section, we'll start by using XADD via the Redis CLI, and then move on to how it works in a Spring Boot application using Spring Data Redis."}),"\n",(0,r.jsx)(n.h2,{id:"redis-cli",children:"Redis-CLI"}),"\n",(0,r.jsxs)(n.p,{children:["Let\u2019s begin by adding some entries to a stream called ",(0,r.jsx)(n.strong,{children:"race:france"}),". Each entry will contain the rider\u2019s name, speed, position, and location ID:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'$ redis-cli\n127.0.0.1:6379> XADD race:france * rider Castilla speed 30.2 position 1 location_id 1\n"1754313469817-0"\n127.0.0.1:6379> XADD race:france * rider Norem speed 28.8 position 3 location_id 1\n"1754313472118-0"\n127.0.0.1:6379> XADD race:france * rider Prickett speed 29.7 position 2 location_id 1\n"1754313474717-0"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now verify the data with XRANGE:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'127.0.0.1:6379> XRANGE race:france - +\n1) 1) "1754313469817-0"\n   2) 1) "rider"\n      2) "Castilla"\n      3) "speed"\n      4) "30.2"\n      5) "position"\n      6) "1"\n      7) "location_id"\n      8) "1"\n2) 1) "1754313472118-0"\n   2) 1) "rider"\n      2) "Norem"\n      3) "speed"\n      4) "28.8"\n      5) "position"\n      6) "3"\n      7) "location_id"\n      8) "1"\n3) 1) "1754313474717-0"\n   2) 1) "rider"\n      2) "Prickett"\n      3) "speed"\n      4) "29.7"\n      5) "position"\n      6) "2"\n      7) "location_id"\n      8) "1"\n'})}),"\n",(0,r.jsxs)(n.admonition,{title:"Important",type:"warning",children:[(0,r.jsxs)(n.p,{children:["In each of the examples, I use ",(0,r.jsx)(n.code,{children:"FLUSHDB"})," to ensure the database starts clean. ",(0,r.jsx)(n.strong,{children:"Be careful"}),": if you have an existing Redis instance running on your local machine, ",(0,r.jsx)(n.code,{children:"FLUSHDB"})," will ",(0,r.jsx)(n.strong,{children:"delete all data in the current database"}),"."]}),(0,r.jsxs)(n.p,{children:["If you're unsure or want to avoid losing important data, the safer approach is to ",(0,r.jsx)(n.strong,{children:"delete only the specific key"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"redis-cli DEL race:france\n"})})]}),"\n",(0,r.jsx)(n.p,{children:"To reset the stream before testing from Spring Boot:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"> flushdb\n> XRANGE race:france - +\n(empty array)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"spring-boot-xadd-with-spring-data-redis",children:"Spring Boot: XADD with Spring Data Redis"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s create a Spring Boot project to send stream entries from an HTTP API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"spring init -d=web,data-redis,devtools,thymeleaf,lombok \\\n  -g com.example \\\n  -a demo \\\n  -p jar \\\n  --build maven \\\n  xadd -x\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configure-redis",children:"Configure Redis"}),"\n",(0,r.jsx)(n.p,{children:"Add to src/main/resources/application.yaml:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"spring:\n  data:\n    redis:\n      host: localhost\n      port: 6379\n"})}),"\n",(0,r.jsx)(n.h2,{id:"define-the-application-and-controller",children:"Define the Application and Controller"}),"\n",(0,r.jsx)(n.p,{children:"DemoApplication.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@SpringBootApplication\npublic class DemoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoApplication.class, args);\n\t}\n\n}\n\n@Data\nclass RaceDataRequest {\n\tprivate String rider;\n\tprivate double speed;\n\tprivate int position;\n\tprivate int locationId;\n}\n\n@RestController\n@RequestMapping("/api/race")\n@RequiredArgsConstructor\nclass RaceStreamController {\n\n  private final StringRedisTemplate redisTemplate;\n\n  @PostMapping("/france")\n  public String addToRaceFrance(@RequestBody RaceDataRequest request) {\n    Map<String, String> fields = Map.of(\n        "rider", request.getRider(),\n        "speed", String.valueOf(request.getSpeed()),\n        "position", String.valueOf(request.getPosition()),\n        "location_id", String.valueOf(request.getLocationId())\n    );\n\n    redisTemplate.opsForStream().add(MapRecord.create("race:france", fields));\n    return "Race data added to stream race:france";\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"test-the-endpoint",children:"Test the Endpoint"}),"\n",(0,r.jsx)(n.p,{children:"Use curl:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'$ curl -X POST http://localhost:8080/api/race/france -H "Content-Type: application/json" \\\n  -d {\n    "rider": "Castilla",\n    "speed": 30.2,\n    "position": 1,\n    "locationId": 1\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Race data added to stream race:france\n"})}),"\n",(0,r.jsx)(n.p,{children:"Verify in Redis:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'127.0.0.1:6379> XRANGE race:france - +\n1) 1) "1754313559708-0"\n   2) 1) "location_id"\n      2) "1"\n      3) "speed"\n      4) "30.2"\n      5) "position"\n      6) "1"\n      7) "rider"\n      8) "Castilla"\n127.0.0.1:6379> \n'})}),"\n",(0,r.jsx)(n.p,{children:"This confirms your Spring Boot API successfully publishes messages into the Redis stream using XADD."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);