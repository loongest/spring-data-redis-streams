"use strict";(self.webpackChunkredis=self.webpackChunkredis||[]).push([[3477],{6807:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorial-basics/xrevrange","title":"XREVRANGE","description":"In some use cases, you may need to read stream entries in reverse order, from the latest to the earliest.","source":"@site/docs/tutorial-basics/04-xrevrange.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/xrevrange","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xrevrange","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/04-xrevrange.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"XRANGE","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xrange"},"next":{"title":"XLEN","permalink":"/spring-data-redis-streams/docs/tutorial-basics/xlen"}}');var t=r(4848),i=r(8453);const s={sidebar_position:4},o="XREVRANGE",d={},c=[{value:"Basic Syntax",id:"basic-syntax",level:2},{value:"Example: Read Entries 50 \u2192 46",id:"example-read-entries-50--46",level:2},{value:"Page 2: Read Entries 45 \u2192 41",id:"page-2-read-entries-45--41",level:2},{value:"Edge Case: When Sequence is 0",id:"edge-case-when-sequence-is-0",level:2},{value:"Spring Data Redis",id:"spring-data-redis",level:2},{value:"Example: curl to fetch latest 5 entries from 50 - 46",id:"example-curl-to-fetch-latest-5-entries-from-50---46",level:2}];function l(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"xrevrange",children:"XREVRANGE"})}),"\n",(0,t.jsxs)(n.p,{children:["In some use cases, you may need to read stream entries in ",(0,t.jsx)(n.strong,{children:"reverse order"}),", from the ",(0,t.jsx)(n.strong,{children:"latest"})," to the ",(0,t.jsx)(n.strong,{children:"earliest"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["While Redis Streams do not support traditional sorting mechanisms like in relational databases, you can traverse the stream in reverse using the ",(0,t.jsx)(n.code,{children:"XREVRANGE"})," command."]}),"\n",(0,t.jsx)(n.h2,{id:"basic-syntax",children:"Basic Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"XREVRANGE [key] [end] [start] COUNT [count]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:(0,t.jsxs)(n.strong,{children:["\ud83d\udca1"," Unlike ",(0,t.jsx)(n.code,{children:"XRANGE"}),", the start and end positions are reversed."]})})}),"\n",(0,t.jsx)(n.h2,{id:"example-read-entries-50--46",children:"Example: Read Entries 50 \u2192 46"}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s revisit our previously generated stream (race",":france",") and read the 5 most recent entries (starting from position 50):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'XREVRANGE race:france + - COUNT 5\n1) 1) "1754326272465-49"\n   2) 1) "rider"\n      2) "Roglic"\n      3) "speed"\n      4) "20.3"\n      5) "position"\n      6) "50"\n      7) "location_id"\n      8) "3"\n2) 1) "1754326272465-48"\n   2) 1) "rider"\n      2) "Fernandez"\n      3) "speed"\n      4) "22.5"\n      5) "position"\n      6) "49"\n      7) "location_id"\n      8) "5"\n3) 1) "1754326272465-47"\n   2) 1) "rider"\n      2) "Lopez"\n      3) "speed"\n      4) "20.8"\n      5) "position"\n      6) "48"\n      7) "location_id"\n      8) "4"\n4) 1) "1754326272465-46"\n   2) 1) "rider"\n      2) "Moreira"\n      3) "speed"\n      4) "37.3"\n      5) "position"\n      6) "47"\n      7) "location_id"\n      8) "4"\n5) 1) "1754326272465-45"    <--- Ends here (position 46)\n   2) 1) "rider"\n      2) "Van Aert"\n      3) "speed"\n      4) "27.1"\n      5) "position"\n      6) "46"              \n      7) "location_id"\n      8) "5"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"page-2-read-entries-45--41",children:"Page 2: Read Entries 45 \u2192 41"}),"\n",(0,t.jsx)(n.p,{children:"To continue paging backwards, decrement the sequence portion of the last ID (1754326272465-45) by one:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'127.0.0.1:6379> xrevrange race:france 1754326272465-44 - count 5\n\n1) 1) "1754326272465-44"\n   2) 1) "rider"\n      2) "Roglic"\n      3) "speed"\n      4) "24.6"\n      5) "position"\n      6) "45"\n      7) "location_id"\n      8) "3"\n2) 1) "1754326272465-43"\n   2) 1) "rider"\n      2) "Vingegaard"\n      3) "speed"\n      4) "34.4"\n      5) "position"\n      6) "44"\n      7) "location_id"\n      8) "3"\n3) 1) "1754326272465-42"\n   2) 1) "rider"\n      2) "Vingegaard"\n      3) "speed"\n      4) "30.8"\n      5) "position"\n      6) "43"\n      7) "location_id"\n      8) "1"\n4) 1) "1754326272465-41"\n   2) 1) "rider"\n      2) "Van Aert"\n      3) "speed"\n      4) "29.2"\n      5) "position"\n      6) "42"\n      7) "location_id"\n      8) "1"\n5) 1) "1754326272465-40"\n   2) 1) "rider"\n      2) "Van Aert"\n      3) "speed"\n      4) "32.6"\n      5) "position"\n      6) "41"\n      7) "location_id"\n      8) "1"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"edge-case-when-sequence-is-0",children:"Edge Case: When Sequence is 0"}),"\n",(0,t.jsxs)(n.admonition,{title:"Important Note",type:"warning",children:[(0,t.jsx)(n.p,{children:"If the last stream ID ends in -0 (e.g., 1754326272465-0), you cannot simply subtract 1 from the sequence."}),(0,t.jsx)(n.p,{children:"Instead, you must subtract 1 from the timestamp portion and set a high sequence number (e.g., 9999) to access the previous entry block."}),(0,t.jsx)(n.p,{children:"Example:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Current ID: 1754326272465-0\nNext XREVRANGE start ID: 1754326272464-9999\n"})}),(0,t.jsx)(n.p,{children:"Command"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"XREVRANGE race:france 1754326272464-9999 - COUNT 5\n"})})]}),"\n",(0,t.jsx)(n.p,{children:"By chaining XREVRANGE with decremented IDs (handling -0 carefully), you can paginate backward through Redis Streams in a controlled manner."}),"\n",(0,t.jsx)(n.h2,{id:"spring-data-redis",children:"Spring Data Redis"}),"\n",(0,t.jsx)(n.p,{children:"Create spring boot project with following commands --OR-- optionally reuse base the previous project by append the controller class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"spring init -d=web,data-redis,devtools,thymeleaf,lombok \\\n  -g com.example \\\n  -a demo \\\n  -p jar \\\n  --build maven \\\n  xrevrange -x\n"})}),"\n",(0,t.jsx)(n.p,{children:"add the following to application.yaml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"spring:\n  data:\n    redis:\n      host: localhost\n      port: 6379\n"})}),"\n",(0,t.jsx)(n.p,{children:"from the DemoApplication.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import lombok.RequiredArgsConstructor;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.domain.Range;\nimport org.springframework.data.redis.connection.stream.MapRecord;\nimport org.springframework.data.redis.core.StreamOperations;\nimport org.springframework.data.redis.connection.Limit;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoApplication.class, args);\n\t}\n\n}\n\n@RestController\n@RequestMapping("/api/race/desc")\n@RequiredArgsConstructor\nclass XRevRangeRaceStreamController {\n\n    private final StringRedisTemplate redisTemplate;\n\n    @GetMapping("/paginate")\n    public List<MapRecord<String, Object, Object>> paginateStream(\n            @RequestParam(defaultValue = "race:france") String streamKey,\n            @RequestParam(required = false) String lastSeenId,\n            @RequestParam(defaultValue = "5") int count\n    ) {\n        StreamOperations<String, Object, Object> streamOperations = redisTemplate.opsForStream();\n        if (lastSeenId == null) {\n            // Initial request - get most recent entries\n            return streamOperations.reverseRange(\n                streamKey,\n                Range.unbounded(),\n                Limit.limit().count(count)\n            );\n        } else {\n            return streamOperations.reverseRange(\n                streamKey,\n                Range.open("-", lastSeenId),  // Define the range from \'endId\' down to \'startId\'\n                Limit.limit().count(count)\n            );\n        }\n\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"example-curl-to-fetch-latest-5-entries-from-50---46",children:"Example: curl to fetch latest 5 entries from 50 - 46"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl "http://localhost:8080/api/race/desc/paginate?streamKey=race:france&count=5" | jq\n'})}),"\n",(0,t.jsx)(n.p,{children:"in result"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Roglic",\n      "speed": "20.3",\n      "position": "50",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-49",\n      "timestamp": 1754326272465,\n      "sequence": 49\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Fernandez",\n      "speed": "22.5",\n      "position": "49",\n      "location_id": "5"\n    },\n    "id": {\n      "value": "1754326272465-48",\n      "timestamp": 1754326272465,\n      "sequence": 48\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Lopez",\n      "speed": "20.8",\n      "position": "48",\n      "location_id": "4"\n    },\n    "id": {\n      "value": "1754326272465-47",\n      "timestamp": 1754326272465,\n      "sequence": 47\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Moreira",\n      "speed": "37.3",\n      "position": "47",\n      "location_id": "4"\n    },\n    "id": {\n      "value": "1754326272465-46",\n      "timestamp": 1754326272465,\n      "sequence": 46\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Van Aert",\n      "speed": "27.1",\n      "position": "46",\n      "location_id": "5"\n    },\n    "id": {\n      "value": "1754326272465-45",   <------ last id from previous response\n      "timestamp": 1754326272465,\n      "sequence": 45\n    },\n    "requiredStream": "race:france"\n  }\n]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Subsequent request (using the last ID from previous response)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl "http://localhost:8080/api/race/desc/paginate?streamKey=race:france&lastSeenId=1754326272465-45&count=5" | jq\n'})}),"\n",(0,t.jsx)(n.p,{children:"in result"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Roglic",\n      "speed": "24.6",\n      "position": "45",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-44",\n      "timestamp": 1754326272465,\n      "sequence": 44\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Vingegaard",\n      "speed": "34.4",\n      "position": "44",\n      "location_id": "3"\n    },\n    "id": {\n      "value": "1754326272465-43",\n      "timestamp": 1754326272465,\n      "sequence": 43\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Vingegaard",\n      "speed": "30.8",\n      "position": "43",\n      "location_id": "1"\n    },\n    "id": {\n      "value": "1754326272465-42",\n      "timestamp": 1754326272465,\n      "sequence": 42\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Van Aert",\n      "speed": "29.2",\n      "position": "42",\n      "location_id": "1"\n    },\n    "id": {\n      "value": "1754326272465-41",\n      "timestamp": 1754326272465,\n      "sequence": 41\n    },\n    "requiredStream": "race:france"\n  },\n  {\n    "stream": "race:france",\n    "value": {\n      "rider": "Van Aert",\n      "speed": "32.6",\n      "position": "41",\n      "location_id": "1"\n    },\n    "id": {\n      "value": "1754326272465-40",\n      "timestamp": 1754326272465,\n      "sequence": 40\n    },\n    "requiredStream": "race:france"\n  }\n]\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(6540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);