"use strict";(self.webpackChunkredis=self.webpackChunkredis||[]).push([[2634],{2959:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Tutorial Intro","href":"/spring-data-redis-streams/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Tutorial - Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Redis Stream Commands","href":"/spring-data-redis-streams/docs/tutorial-basics/create-a-page","docId":"tutorial-basics/create-a-page","unlisted":false},{"type":"link","label":"XADD","href":"/spring-data-redis-streams/docs/tutorial-basics/xadd","docId":"tutorial-basics/xadd","unlisted":false},{"type":"link","label":"XRANGE","href":"/spring-data-redis-streams/docs/tutorial-basics/xrange","docId":"tutorial-basics/xrange","unlisted":false},{"type":"link","label":"XREVRANGE","href":"/spring-data-redis-streams/docs/tutorial-basics/xrevrange","docId":"tutorial-basics/xrevrange","unlisted":false},{"type":"link","label":"XLEN","href":"/spring-data-redis-streams/docs/tutorial-basics/xlen","docId":"tutorial-basics/xlen","unlisted":false},{"type":"link","label":"XINFO STREAM","href":"/spring-data-redis-streams/docs/tutorial-basics/xinfo-stream","docId":"tutorial-basics/xinfo-stream","unlisted":false},{"type":"link","label":"XREAD","href":"/spring-data-redis-streams/docs/tutorial-basics/xread","docId":"tutorial-basics/xread","unlisted":false},{"type":"link","label":"XGROUP ...","href":"/spring-data-redis-streams/docs/tutorial-basics/xgroup-consumer","docId":"tutorial-basics/xgroup-consumer","unlisted":false},{"type":"link","label":"XACK","href":"/spring-data-redis-streams/docs/tutorial-basics/xack","docId":"tutorial-basics/xack","unlisted":false},{"type":"link","label":"XCLAIM/XAUTOCLAIM","href":"/spring-data-redis-streams/docs/tutorial-basics/xclaim","docId":"tutorial-basics/xclaim","unlisted":false},{"type":"link","label":"XINFO CONSUMERS","href":"/spring-data-redis-streams/docs/tutorial-basics/xinfo-consumers","docId":"tutorial-basics/xinfo-consumers","unlisted":false},{"type":"link","label":"XPENDING","href":"/spring-data-redis-streams/docs/tutorial-basics/xpending","docId":"tutorial-basics/xpending","unlisted":false},{"type":"link","label":"Maintenance with XTRIM","href":"/spring-data-redis-streams/docs/tutorial-basics/xtrim","docId":"tutorial-basics/xtrim","unlisted":false},{"type":"link","label":"Redis Stream Consumer Boilerplate","href":"/spring-data-redis-streams/docs/tutorial-basics/best-practice","docId":"tutorial-basics/best-practice","unlisted":false}],"href":"/spring-data-redis-streams/docs/category/tutorial---basics"}]},"docs":{"intro":{"id":"intro","title":"Tutorial Intro","description":"In modern microservices architecture, event-driven communication is becoming a powerful paradigm. Instead of services calling each other directly (tight coupling), they react to events, enabling better scalability, fault-tolerance, and flexibility.","sidebar":"tutorialSidebar"},"tutorial-basics/best-practice":{"id":"tutorial-basics/best-practice","title":"Redis Stream Consumer Boilerplate","description":"After a few projects I\u2019ve settled on a code idiom that improves development time and covers the most common requirements:","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-page":{"id":"tutorial-basics/create-a-page","title":"Redis Stream Commands","description":"Redis Stream commands are basically cover the following:","sidebar":"tutorialSidebar"},"tutorial-basics/xack":{"id":"tutorial-basics/xack","title":"XACK","description":"The XACK command removes one or more messages from a Redis Stream Pending Entries List (PEL), marking them as acknowledged for a given consumer group.","sidebar":"tutorialSidebar"},"tutorial-basics/xadd":{"id":"tutorial-basics/xadd","title":"XADD","description":"The XADD command is the primary method for publishing new messages into a Redis stream. In Redis Streams, producers use XADD to append data entries\u2014commonly referred to as events\u2014to a stream. Each entry consists of a key-value pair and is assigned a unique stream ID.","sidebar":"tutorialSidebar"},"tutorial-basics/xclaim":{"id":"tutorial-basics/xclaim","title":"XCLAIM/XAUTOCLAIM","description":"We\'ve cover quite a lot so far, let\u2019s now explore how to identify and handle failed entries (i.e., pending messages that were never acknowledged due to errors or consumer crashes).","sidebar":"tutorialSidebar"},"tutorial-basics/xgroup-consumer":{"id":"tutorial-basics/xgroup-consumer","title":"XGROUP ...","description":"In this section, we\'ll dive into the concept of Consumers and Groups in Redis Streams. The term \\"consumer\\" only matters within a consumer group context.","sidebar":"tutorialSidebar"},"tutorial-basics/xinfo-consumers":{"id":"tutorial-basics/xinfo-consumers","title":"XINFO CONSUMERS","description":"The XINFO CONSUMERS command returns the list of consumers that belong to a specific ` consumer group of the stream stored at `.","sidebar":"tutorialSidebar"},"tutorial-basics/xinfo-stream":{"id":"tutorial-basics/xinfo-stream","title":"XINFO STREAM","description":"The XINFO STREAM command in Redis is like the \\"stream metadata inspector\\" \u2014 it gives you detailed internal information about a stream key, similar to how you\'d use .describe() in databases or introspection in code.","sidebar":"tutorialSidebar"},"tutorial-basics/xlen":{"id":"tutorial-basics/xlen","title":"XLEN","description":"The Redis XLEN command is very similar to calling .size() or .length on a list or collection in Java, Python, or JavaScript.","sidebar":"tutorialSidebar"},"tutorial-basics/xpending":{"id":"tutorial-basics/xpending","title":"XPENDING","description":"The XPENDING command shows information about pending entries in a stream for a given consumer group.","sidebar":"tutorialSidebar"},"tutorial-basics/xrange":{"id":"tutorial-basics/xrange","title":"XRANGE","description":"The XRANGE command is used to navigate Redis Stream entries in chronological order \u2014 from the oldest to the newest.","sidebar":"tutorialSidebar"},"tutorial-basics/xread":{"id":"tutorial-basics/xread","title":"XREAD","description":"XREAD is a Redis command used to read entries from one or more Redis Streams. It can read both historical and new entries, and it supports optional blocking \u2014 much like tail -f on a log file.","sidebar":"tutorialSidebar"},"tutorial-basics/xrevrange":{"id":"tutorial-basics/xrevrange","title":"XREVRANGE","description":"In some use cases, you may need to read stream entries in reverse order, from the latest to the earliest.","sidebar":"tutorialSidebar"},"tutorial-basics/xtrim":{"id":"tutorial-basics/xtrim","title":"Maintenance with XTRIM","description":"Over time, a Redis Stream can grow very large if we keep appending new entries without any cleanup.","sidebar":"tutorialSidebar"}}}}')}}]);